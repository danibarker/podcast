{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["options","sorters","one","two","episode","Container","styled","div","PodcastList","SortDiv","App","useState","podcastList","setPodcastList","sortBy","setSortBy","query","setQuery","textFile","setTextFile","useEffect","a","fetch","feedRes","text","feed","parser","DOMParser","xmlDoc","parseFromString","items","getElementsByTagName","podcasts","item","title","childNodes","nodeValue","link","pubDate","mp3","getAttribute","push","filter","podcast","regex","RegExp","toUpperCase","match","map","Date","toLocaleDateString","undefined","weekday","year","month","day","getFeed","onChange","e","target","value","option","placeholder","onClick","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","downloadTxtFile","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26dbe15e.chunk.js","sourcesContent":["\n\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components'\nconst options = ['Episode', 'Episode (desc)']\nconst sorters = {\n    \"Episode\": (one, two) => {\n        return (\n            one.episode - two.episode\n        );\n    },\n    \"Episode (desc)\": (one, two) => {\n        return (\n            two.episode - one.episode\n        );\n    },\n};\nconst downloadTxtFile = (textFile) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob(textFile, { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = \"podcastList.txt\";\n    document.body.appendChild(element);\n    element.click();\n}\nfunction App() {\n\n    const [podcastList, setPodcastList] = useState()\n    const [sortBy, setSortBy] = useState('Episode')\n    const [query, setQuery] = useState('')\n    const [textFile, setTextFile] = useState();\n    useEffect(() => {\n        const getFeed = async () => {\n            const feedRes = await fetch('https://feed.podbean.com/rainforestalberta/feed.xml')\n            const feed = await feedRes.text()\n            let parser = new DOMParser();\n            let xmlDoc = parser.parseFromString(feed, \"text/xml\");\n\n\n\n            let items = xmlDoc.getElementsByTagName(\"item\")\n            let podcasts = []\n            for (let item of items) {\n                let title = item.getElementsByTagName('title')[0].childNodes[0].nodeValue\n                let episode = item.getElementsByTagName('itunes:episode')[0].childNodes[0].nodeValue\n                let link = item.getElementsByTagName('link')[0].childNodes[0].nodeValue\n                let pubDate = item.getElementsByTagName('pubDate')[0].childNodes[0].nodeValue\n                let mp3 = item.getElementsByTagName('enclosure')[0].getAttribute('url')\n                podcasts.push({ title, episode, link, pubDate, mp3 })\n            }\n            setPodcastList(podcasts.filter((podcast) => {\n                let regex = new RegExp(query.toUpperCase())\n                return podcast.title.toUpperCase().match(regex)\n            }))\n            setTextFile(podcasts.filter((podcast) => {\n                let regex = new RegExp(query.toUpperCase())\n                return podcast.title.toUpperCase().match(regex)\n            }).map((podcast) => `Episode: ${podcast.episode}\\nTitle: ${podcast.title} \\nURL: ${podcast.link} \\nDate: ${new Date(podcast.pubDate).toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} \\nAudio URL: ${podcast.mp3} \\n\\n`))\n\n\n        }\n        getFeed()\n    }, [query])\n    return (\n        <Container>\n            <SortDiv>\n                Sort by:\n          <select onChange={(e) => {\n                    setSortBy(e.target.value)\n                }} >\n\n                    {options.map((option) => {\n                        return <option>{option}</option>\n                    })}\n                </select>\n                <br />\n                <input placeholder=\"Search\" onChange={(e) => {\n                    setQuery(e.target.value)\n                }} /><br />\n                <button onClick={() => { downloadTxtFile(textFile) }}> Download text file</button>\n            </SortDiv>\n            {podcastList && podcastList.sort(sorters[sortBy]).map((podcast) => {\n                return (<PodcastList>\n                    <div>Episode: {podcast.episode}</div>\n                    <div>Title: {podcast.title}</div>\n                    <div>URL: <a href={podcast.link}>{podcast.link}</a></div>\n                    <div>Date: {new Date(podcast.pubDate).toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</div>\n                    <div>Audio URL: <a href={podcast.mp3}>{podcast.mp3}</a></div></PodcastList>\n\n                )\n            })}\n\n        </Container>\n    );\n}\nconst Container = styled.div`\n    margin: 20px 40px;\n`\nconst PodcastList = styled.div`\n    margin: 10px;\n`\nconst SortDiv = styled.div`\n    display:flex;\n    flex-direction:column;\nwidth: 150px;\nmargin: 20px 0;\n\n\n`\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}